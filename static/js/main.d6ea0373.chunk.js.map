{"version":3,"sources":["context/conversion/conversionContext.js","context/types.js","utils/getOppositeCurrency.js","context/conversion/conversionReducer.js","context/conversion/ConversionState.js","utils/settings.js","components/toggle/Toggle.js","assets/img/arrow-up-solid.svg","assets/img/arrow-down-solid.svg","assets/img/arrows-alt-h-solid.svg","components/rates/Rates.js","components/recommendation/Recommendation.js","App.js","reportWebVitals.js","index.js"],"names":["conversionContext","createContext","CURRENCY_TOGGLED","getOppositeCurrency","currency","conversionReducer","state","action","type","conversionRates","Object","entries","payload","rates","map","base","medianIndex","Math","floor","length","medianConversionRate","conversionFrom","conversionTo","toFixed","currentConversionRate","ConversionState","props","useReducer","dispatch","toggleCurrency","from","to","a","thirtyDaysAgo","moment","subtract","format","axios","get","response","data","console","error","Provider","value","children","Toggle","useContext","ConversionContext","useState","selectedCurrency","setSelectedCurrency","useEffect","onChange","e","target","className","id","name","defaultChecked","htmlFor","Rates","arrow","arrowUp","arrowDown","arrowPar","src","alt","Recommendation","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","defaults","baseURL","headers","post","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d6ea0373.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nconst conversionContext = createContext();\r\n\r\nexport default conversionContext;","export const CURRENCY_TOGGLED = \"CURRENCY_TOGGLED\";","const getOppositeCurrency = (currency) => {\r\n  if(currency === \"CAD\") {\r\n    return \"USD\";\r\n  } else {\r\n    return \"CAD\";\r\n  }\r\n};\r\n\r\nexport default getOppositeCurrency;","import { CURRENCY_TOGGLED } from \"../types\";\r\nimport getOppositeCurrency from \"../../utils/getOppositeCurrency\";\r\n\r\nconst conversionReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case CURRENCY_TOGGLED:\r\n      let conversionRates = Object.entries(action.payload.rates).map(\r\n        ([date, conversionRate]) =>\r\n          conversionRate[getOppositeCurrency(action.payload.base)]\r\n      );\r\n      let medianIndex = Math.floor(conversionRates.length / 2);\r\n      let medianConversionRate =\r\n        conversionRates.length % 2 !== 0\r\n          ? conversionRates[medianIndex]\r\n          : (conversionRates[medianIndex - 1] + conversionRates[medianIndex]) /\r\n            2;\r\n\r\n      return {\r\n        ...state,\r\n        conversionFrom: action.payload.base,\r\n        conversionTo: getOppositeCurrency(action.payload.base),\r\n        medianConversionRate: medianConversionRate.toFixed(2),\r\n        currentConversionRate: conversionRates[\r\n          conversionRates.length - 1\r\n        ].toFixed(2),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default conversionReducer;\r\n","import React, { useReducer } from \"react\";\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\nimport ConversionContext from \"./conversionContext\";\r\nimport conversionReducer from \"./conversionReducer\";\r\nimport { CURRENCY_TOGGLED } from \"../types\";\r\nimport { MEDIAN_CONVERSION_RATE_DISTRIBUTION_DAYS } from \"../../utils/settings\";\r\n\r\nconst ConversionState = (props) => {\r\n  const initialState = {\r\n    conversionFrom: \"CAD\",\r\n    conversionTo: \"USD\",\r\n    medianConversionRate: 0,\r\n    currentConversionRate: 0,\r\n  };\r\n\r\n  const [state, dispatch] = useReducer(conversionReducer, initialState);\r\n\r\n  const toggleCurrency = async (from, to) => {\r\n    let thirtyDaysAgo = moment()\r\n      .subtract(MEDIAN_CONVERSION_RATE_DISTRIBUTION_DAYS, \"days\")\r\n      .format(\"YYYY-MM-DD\");\r\n\r\n    try {\r\n      const response = await axios.get(\r\n        `/${thirtyDaysAgo}..?from=${from}&to=${to}`\r\n      );\r\n\r\n      dispatch({\r\n        type: CURRENCY_TOGGLED,\r\n        payload: response.data,\r\n      });\r\n    } catch (error) {\r\n      console.error(\"API error!\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ConversionContext.Provider\r\n      value={{\r\n        conversionFrom: state.conversionFrom,\r\n        conversionTo: state.conversionTo,\r\n        medianConversionRate: state.medianConversionRate,\r\n        currentConversionRate: state.currentConversionRate,\r\n        toggleCurrency: toggleCurrency,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </ConversionContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ConversionState;\r\n","export const MEDIAN_CONVERSION_RATE_DISTRIBUTION_DAYS = 30;\r\n","import React, { useState, useContext, useEffect } from \"react\";\r\nimport ConversionContext from \"../../context/conversion/conversionContext\";\r\nimport getOppositeCurrency from \"../../utils/getOppositeCurrency\";\r\nimport \"./Toggle.css\";\r\n\r\nconst Toggle = (props) => {\r\n  const conversionContext = useContext(ConversionContext);\r\n\r\n  const { toggleCurrency } = conversionContext;\r\n\r\n  const [selectedCurrency, setSelectedCurrency] = useState(\"CAD\");\r\n\r\n  useEffect(() => {\r\n    toggleCurrency(selectedCurrency, getOppositeCurrency(selectedCurrency));\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [selectedCurrency]);\r\n\r\n  const onChange = (e) => {\r\n    setSelectedCurrency(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"Toggle\">\r\n      <div className=\"toggle-switch\">\r\n        <input\r\n          type=\"radio\"\r\n          id=\"currency-cad\"\r\n          name=\"currency\"\r\n          value=\"CAD\"\r\n          defaultChecked={true}\r\n          onChange={onChange}\r\n        />\r\n        <label htmlFor=\"currency-cad\">CAD to USD</label>\r\n        <input\r\n          type=\"radio\"\r\n          id=\"currency-usd\"\r\n          name=\"currency\"\r\n          value=\"USD\"\r\n          onChange={onChange}\r\n        />\r\n        <label htmlFor=\"currency-usd\">USD to CAD</label>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Toggle;\r\n","export default __webpack_public_path__ + \"static/media/arrow-up-solid.e9b9f0b5.svg\";","export default __webpack_public_path__ + \"static/media/arrow-down-solid.c7e7c919.svg\";","export default __webpack_public_path__ + \"static/media/arrows-alt-h-solid.89b3edff.svg\";","import React, { useContext } from \"react\";\r\nimport ConversionContext from \"../../context/conversion/conversionContext\";\r\nimport { MEDIAN_CONVERSION_RATE_DISTRIBUTION_DAYS } from \"../../utils/settings\";\r\n\r\nimport arrowUp from \"../../assets/img/arrow-up-solid.svg\";\r\nimport arrowDown from \"../../assets/img/arrow-down-solid.svg\";\r\nimport arrowPar from \"../../assets/img/arrows-alt-h-solid.svg\";\r\n\r\nimport \"./Rates.css\";\r\n\r\nconst Rates = (props) => {\r\n  const conversionContext = useContext(ConversionContext);\r\n\r\n  const {\r\n    conversionFrom,\r\n    conversionTo,\r\n    medianConversionRate,\r\n    currentConversionRate,\r\n  } = conversionContext;\r\n\r\n  let arrow = arrowUp;\r\n\r\n  if (currentConversionRate > medianConversionRate) {\r\n    arrow = arrowUp;\r\n  } else if (currentConversionRate < medianConversionRate) {\r\n    arrow = arrowDown;\r\n  } else {\r\n    arrow = arrowPar;\r\n  }\r\n\r\n  return (\r\n    <div className=\"Rates\">\r\n      <div className=\"container\">\r\n        <div className=\"\">\r\n          <div className=\"conversion-rate\">{medianConversionRate}</div>\r\n          <p>\r\n            Median {conversionFrom} to {conversionTo} conversion rate in the\r\n            last {MEDIAN_CONVERSION_RATE_DISTRIBUTION_DAYS} days\r\n          </p>\r\n        </div>\r\n        <div className=\"\">\r\n          <img src={arrow} alt=\"\" />\r\n        </div>\r\n        <div className=\"\">\r\n          <div className=\"conversion-rate\">{currentConversionRate}</div>\r\n          <p>\r\n            Current {conversionFrom} to {conversionTo} conversion rate\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Rates;\r\n","import React, { useContext } from \"react\";\r\nimport ConversionContext from \"../../context/conversion/conversionContext\";\r\n\r\nimport \"./Recommendation.css\";\r\n\r\nconst Recommendation = (props) => {\r\n  const conversionContext = useContext(ConversionContext);\r\n\r\n  const { medianConversionRate, currentConversionRate } = conversionContext;\r\n\r\n  return (\r\n    <div className=\"Recommendation\">\r\n      {currentConversionRate > medianConversionRate && (\r\n        <p>\r\n          The conversion rate seems to be going up. We do not think its a good\r\n          idea to sell right now!\r\n        </p>\r\n      )}\r\n      {currentConversionRate < medianConversionRate && (\r\n        <p>\r\n          The conversion rate seems to be going down. Perhaps it's time to get\r\n          in and buy the dip!\r\n        </p>\r\n      )}\r\n      {currentConversionRate === medianConversionRate && (\r\n        <p>\r\n          The conversion rate seems to be holding steady. Whether your buy or\r\n          sell, the choice is yours!\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recommendation;\r\n","import React, { Fragment } from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport ConversionState from \"./context/conversion/ConversionState\";\n\nimport Toggle from \"./components/toggle/Toggle\";\nimport Rates from \"./components/rates/Rates\";\nimport Recommendation from \"./components/recommendation/Recommendation\";\n\nimport \"./App.css\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <ConversionState>\n        <Router>\n          <Fragment>\n            <div className=\"\">\n              <h1>Currency Trader</h1>\n              <p>\n                Determine if its time to buy or sell based on today's conversion\n                rates.\n              </p>\n              <Toggle />\n              <Rates />\n              <Recommendation />\n            </div>\n          </Fragment>\n        </Router>\n      </ConversionState>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport axios from \"axios\";\n\naxios.defaults.baseURL = \"https://api.frankfurter.app\";\naxios.defaults.headers.post[\"Context-Type\"] = \"application/json\";\n\n// axios.interceptors.request.use(request => {\n//     console.log(request);\n//     return request;\n// }, error => {\n//     console.log(error);\n//     return Promise.reject(error);\n// });\n\n// axios.interceptors.response.use(response => {\n//     console.log(response);\n//     return response;\n// }, error => {\n//     console.log(error);\n//     return Promise.reject(error);\n// });\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}